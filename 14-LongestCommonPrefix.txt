//===================================================================================================//

Longest Common Prefix

Write a function to find the longest common prefix string amongst an array of strings. If there is no 
common prefix, return an empty string ""

Example 1: 

Input: ["flower", "flow", "flight"]
Output: "fl"


Example 2: 

Input: ["dog", "racecar", "car"] 
Output: ""

Explanation: There is no common prefix among the input strings 

Note: 

All given inputs are in lowercase letters a-z



//===================================================================================================//

Approach 1: Horizontal scanning 


Intuition: 

For a start we will describe a simple way of find the longest prefix shared by a set of strings 
LCP(S1 ... Sn).We will use the observation that: 

LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) 



Algorithm:

To employ this idea, the algorithm iterates through the strings [S1 ... Sn]. finding at each iteration
i the longest common prefix of strings LCP(S1 ... Si). When LCP(S1 ... Si) is an empty string, the 
algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 ... Sn) 


Example: 

{leets, leetcode, leet, leeds}
   \       /      
  LCP{1,2} = leets
  	     leetcode
	     leet 

	 	\	{leets, leetcode, leet, leeds}
		 \ 			   /

		 LCP{1,3} = leet
		 	    leet
			    leet

			      \          {leets, leetcode, leet, leeds}
			       \ 				  /
			       LCP{1,4}   leet
			       		  leeds
					  lee

				LCP{1,4} = "lee"







Java 

public String longestCommon Prefix(String[] strs){
	if (strs.length==0){
		return ""; 
	}
	String prefix=strs[0]; 
	for (int i=1; i<strs.length; i++) {
		while (strs[i].indexOf(prefix) != 0) {
			prefix=prefix.substring(0, prefix.length() -1);
			if (prefix.isEmpty()) {
				return "";
			}
		}
		return prefix; 
	}
}




Complexity Analysis

Time complexity: 	O(S)	Where S is the sum of all characters in all strings. In the worse case
				all n strings are the same. The algorithm compares the string S1 with 
				the other strings [S2 ... Sn]. There are S character comparisons where
				S is the sum of all characters in the input array 

Space complexity: 	O(1) 	We only used constant extra space 





//===================================================================================================//

Approach 2: Vertical scanning 

Imagine a very short string is at the end of the array. The above approach will still do S comparisons.
One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on
the same column (same character index of the strings) before moving on to the next column. 



Java

public String longestCommonPrefix(String[] strs) {
	if (strs==null || strs.length==) return ""; 
	for (int i=0; i<strs[0].length(); i++){
		char c=strs[0].charAt(i); 
		for (int j=1; j<strs.length; j++) {
			if (i==strs[j].length() || strs[j].charAt(i)!=c){
				return strs[0].substring(0,i);
			}
		}
	}
	return strs[0]; 
}



Complexity Analysis 

Time complexity: 	O(S) 	Where S is the sum of all characters in all strings. In the worst case
				there will be n equal strings with length m and the algorithm performs
				S=n*m character comparisons. Even the worst case is still the same as 
				Approach 1, in the best case there are at most n*minLen comparisons 
				where minLen is the length of the shortest string in the array. 

Space complexity: 	O(1)	We only used constant extra space





//===================================================================================================//


Approach 3: Divide and conquer

The idea of the algorithm comes from the associative property of LCP operation. We notice that: 
LCP(S1 ... Sn) = LCP(LCP(S1 ... Sk), LCP(Sk+1 ... Sn)), where LCP(S1 ... Sn) is the longest common
prefix in a set of strings [S1 ... Sn], 1<k<n 


Algorithm 

To apply the previous observation, we use the divide and conquer technique, where we split the 
LCP(Si ... Sj) problem into two subproblems LCP(Si ... Smid) and LCP(Smid+1 ... Sj), where mid is 
(i+j)/2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem 
LCP(Si ... Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till 
there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the 
LCP(Si ... Sj) 




				{leetcode, leet, lee, le} 

				    /                \   
Divide 			{leetcode, leet}            {lee, le} 

Conquer				|			 | 

			     {leet} 		        {le} 

			         \                      /

				 	   {le} 

	Searching for the longest common prefix (LCP) in dataset {leetcode, leet, lee, le} 





Java 

public String longestCommonPrefix(String[] strs) { 

	if (strs == null || strs.length ==0) return "";
		return longestCommonPrefix(strs, 0, strs.length-1); 

}

private String longestCommonPrefix(String[] strs, int l, int r) { 
	if (l==r) {
		return strs[l];
	}
	else {
		int mid=(l+r)/2; 
		String lcpLeft= longestCommonPrefix(strs,l, mid); 
		String lcpRight= longestCommonPrefix(strs,mid+1;r); 
		return commonPrefix(lcpLeft,lcpRight);
	}
}

String commonPrefix(String left, String right) {
	int min=Math.min(left.length(), right.length()); 
	for (int i=0; i<min; i++) {
		if (left.charAt(i) !=right.charAt(i) ){
			return left.substring(0, i);
		}
	}
	return left.substring(0, min);
}


Complexity Analysis: 

In the worst case we have n equal strings with length m

	
Time Complexity: O(S)		where S is the number of all characters in the array, S=m*n so time
				complexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the
				best case the algorithm performs O(minLen * n) comparisons, where
				minLen is the shortest string of the array 

Space Complexity: O(m*log(n))	There is a memory overhead since we sotre recursive call in the 
				execution stack. There are log(n) recursive calls, each store needs m
				space to store the result so space complexity is O(m*log(n))





//===================================================================================================//

Approach 4: Binary search 

The idea is to apply binary search method to find the string with maximum value L, which is common 
prefix of all the strings. The algorithm searches the space in the interval (0 ... minLen), where 
minLen is minimum string length and the maximum possible common prefix. Each time search space is 
divided in two equal parts, one of them is discarded because it is sure that it doesn't contain the 
solution. There are two possible cases: 

	- S[1...mid] is not a common string. This means that for each j>i, S[1...j] is not a common
	  string and we discard the second half of the search space

	- S[1...mid] is common string. This means that for each i<j, S[1...i] is a common string 
	  and we discard the first half of the search space, because we try to find longer common 
	  prefix 


 				{leets, leetcode, leetc, leeds} 

						|
					      
					     "leets"
					    /        \
					 "lee"      "ts"

					     midpoint 
				
				"lee" in "leetcode" : yes
				"lee" in "leetc" : yes
				"lee" in "leeds" : yes

						|

					     "leets"
					     /     \
					  "lee"    "ts"
					    |      /   \

					  "lee"   "t"   "s"
					        
						   midpoint


						   "leet" in "leetcode" : yes
						   "leet" in "leetc" : yes 
						   "leet" in "leeds" : no

						   LCP= "lee" 


Java

public String longestCommonPrefix(String[] strs) {
	if (strs==null || strs.length==0)
		return "";
	int minLen=Integer.MAX_VALUE; 
	for (String str: strs)
		minLen=Math.min(minLen, str.length());
	int low=1; 
	int high=min Len; 
	while (low<=high) {
		int middle=(low+high)/2;
		if (isCommonPrefix(strs, middle)
			low=middle+1;
		else 
			high=middle-1;
	}
	return strs[0].substring(0, (low + high)/2);
} 

private boolean isCommonPrefix(String[] strs, int len) {
	String str1=strs[0].substring(0,len);
	for (int i=1; i<strs.length; i++)
		if (!strs[i].startsWith(str1))
			return false;
	return true;
}



Complexity Analysis 

In the worst case we have n equal strings with length m 

	Time complexity: 	O(S * log(n)), where S is the sum of all characters in all strings. The
				algorithm makes log(n) iterations, for each of them there are S=m*n 
				comparisons, which gives in total O(S * log(n)) time complexity

	Space complexity: 	O(1). We only used constant extra space 





//===================================================================================================//

Further Thoughts/ Follow up 

Considering a slightly different problem: 

	Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S.
	This LCP query will be called frequently

We could optimize LCP queries by storing the set of keys S in a Trie. See this for Trie implementation. 


//===================================================================================================//

Trie (pronounced Try - Prefix tree) and the most common Operations With It


Implement a trie with insert, search, and startsWith methods

Example: 
	Trie trie=new Trie(); 

	trie.insert("apple");
	trie.search("apple");		//returns true 
	trie.search("app");		//returns false
	trie.startsWith("app");		//returns true
	trie.insert("app");
	trie.search("app"); 		//returns true

Note 

* You may assume that all inputs consist of lowercase letters a-z
* All inputs are guaranteed to be non-empty strings 


<br><br>
## Solution 

Trie (we pronounce "try") or prefix tree is a tree data structure which is used for the retrieval of a
key in a dataset of strings. THere are various applications of this very efficient data structure such
as: 

* Autocomplete
* Spell checker 
* IP routing (Longest prefix matching) 
* T9 predictive text (text on nine keys - used on phones during the late 1990s) 
* Solving word games 


There are several other data structures like balanced trees and hash tables which give us the 
possibility to search for a word in a dataset of strings so why do we use a trie? Althought a hash 
table has O(1) time complexity for looking for a key, it is not efficient in the following operations: 

* Finding all keys with a common prefix
* Enumerating a dataset of strings in lexicographical order

Another reason why the trie outperforms has table, is that as hash table increases in size, there are
lots of hash collisions and the search time complexity could deteriorate to O(n), where n is the 
number of keys inserted. Tries could use less space compared to Hash Table when storing many keys with
the same prefix. In this case using trie has only O(m) time complexity, where m is the key length.
Searching for a key in balanced tree costs O(m log n) time complexity. 


## Trie node structure 

Trie is a rooted tree. Its nodes have the following fields: 

* Maximum of R links to its children, where each link corresponds to one of R character values from
  dataset alphabet. In this article we assume that R is 26, the number of lowercase latin letters 

* Boolean field which specifies whether the node corresponds to the end of the key, or is just a 
  key prefix


```

Root 

		isEnd: false 
	a b c d e f g h i j k l m n o p q r s t u v w x y z
	                      
			      |
  			     
			     link 

	        isEnd: false
	a b c d e f g h i j k l m n o p q r s t u v w x y z

		|

	       link 

	        isEnd: false
	a b c d e f g h i j k l m n o p q r s t u v w x y z

		|

	       link 

	        isEnd: false
	a b c d e f g h i j k l m n o p q r s t u v w x y z

					      |

	       				     link 

	        isEnd: true 


Representation of a key "leet" in trie 
```

```java 
class TrieNode {

    // R links to node children
    private TrieNode[] links;

    private final int R = 26;

    private boolean isEnd;

    public TrieNode() {
        links = new TrieNode[R];
    }

    public boolean containsKey(char ch) {
        return links[ch -'a'] != null;
    }
    public TrieNode get(char ch) {
        return links[ch -'a'];
    }
    public void put(char ch, TrieNode node) {
        links[ch -'a'] = node;
    }
    public void setEnd() {
        isEnd = true;
    }
    public boolean isEnd() {
        return isEnd;
    }
}
```

Two of the most common operations in a trie are insertion of a key and search for a key




## Insertion of a key to a trie

We insert a key by searching into the trie. We start from the root and search a link, which corresponds
to the first key character. There are two cases: 

* A link exists. Then we move down the tree following the link to the next child level. The algorithm
  continues with searching for the next key character. 

* A link does not exist. Then we create a new node and link it with the parent's link matching the 
  current key character. We repeat this step until we encounter the last character of the key, then 
  we mark the current node as an end node and the algorithm finishes. 


```
Inserting "le" into the Trie


		Root
		 
		 1
  
                  \ l
		    
		    2
 
                      \ e
                     
		        3   End of Key "le"


```

```
Inserting "leet" into the Trie 




			Root

			 1

			  \  l

			     2

			       \ e

			         3   End of key "le"

				   \ e
				     
				     4

				       \ t
				        
					 5   End of key "leet"

```


```
Inserting "code" into the Trie 



				Root
				 
				  1

			      c	 / \  l

			       6     2
			     
			  o   /        \  e

			     7            3    End of key "le"
			 
		       d   /                \   e

			 8                    4

		    e  /                        \   t
		      
End of key "code"     9                           5   End of Key "root"


```

Building a Trie from dataset {le, leet, code}


```java
class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);
            if (!node.containsKey(currentChar)) {
                node.put(currentChar, new TrieNode());
            }
            node = node.get(currentChar);
        }
        node.setEnd();
    }
}
```

**Complexity Analysis**

```
	Time complexity:  O(m)  where m is the key length. In each iteration of this algorithm we 
	 			either create a node in the trie till we reach the end of the key. 
				This takes only m operations 

	Space complexity: O(m)  In the worst case newly inserted key doesn't share a prefix with the 
				keys already inserted in the trie. We have to add m new nodes, which 
				only takes us O(m) space
```


## Search for a Key in a Trie 


Each key is represented in the trie as a path from the root to the internal node or leaf. We start from
the root with the first key character. We examine the current node for a link corresponding to the key
character. There are two cases: 

* A link exists. We move to the next node in the path following this link, and proceed searching for
  the next key character 
* A link does not exist. If there are no available key characters and current node is marked as isEnd
  we return true. Otherwise there are two possible cases in each of them we return false: 

  * There are key characters left, but it is impossible to follow the key path in the trie, and the
    key is missing
  * No key characters left, but current node is not marked as isEnd. Therefore the search key is only
    a prefix of another key in the trie


```
Searching for key "leet" in the Trie

		                 Root
				 
				  1

			      c	 / \  l    <============================== l

			       6     2
			     
			  o   /        \  e   <=========================== e

			     7            3    End of key "le"
			 
		       d   /                \   e   <===================== e

			 8                    4

		    e  /                        \   t   <================= t
		      
End of key "code"     9                           5   End of Key "root"    <============ Key Found


```

```java
class Trie {
    ...

    // search a prefix or whole key in trie and
    // returns the node where search ends
    private TrieNode searchPrefix(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
           char curLetter = word.charAt(i);
           if (node.containsKey(curLetter)) {
               node = node.get(curLetter);
           } else {
               return null;
           }
        }
        return node;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
       TrieNode node = searchPrefix(word);
       return node != null && node.isEnd();
    }
}
```

**Complexity Analysis**

```
	Time Complexity:   O(m)    In each step of the algorithm we search for the next key character.
	 			   In the worst case the algorithm performs m operations
	Space Complexity:  O(1)
```


## Search for a key prefix in a trie

The approach is very similar to the one we used for searching a key in a trie. We traverse the trie 
from the root, till there are no character left in key prefix or it is impossible to continue the path
in the trie with the current key character. The only difference with the mentioned above search for a 
key algorithm is that when we come to an end of the key prefix, we always return true. We don't need to
conside the isEnd mark of the current trie node, because we are searching for a prefix of a key, not
for a whole key. 


```
Searching for "co" in the Trie 


				Root
				 
				  1

      	c  ==============>    c	 / \  l

			       6     2
			     
 	o  ============>  o   /        \  e

	Prefix Found         7            3    End of key "le"
			 
		       d   /                \   e

			 8                    4

		    e  /                        \   t
		      
End of key "code"     9                           5   End of Key "root"
```

```java
class Trie {
    ...

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode node = searchPrefix(prefix);
        return node != null;
    }
}
```

**Complexity Analysis**
```
	Time Complexity:  O(m)
	Space Complexity: O(1)
```

//===================================================================================================//
